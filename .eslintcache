[{"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\index.js":"1","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\reportWebVitals.js":"2","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\App.js":"3","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\redux-store.js":"4","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\dialogsReducer.js":"5","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\messagesReducer.js":"6","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messanger.jsx":"7","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messages\\WindowContainer.jsx":"8","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\DialogsContainer.jsx":"9","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messages\\Window.jsx":"10","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\Dialogs.jsx":"11","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messages\\Message\\Message.jsx":"12","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.jsx":"13","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\authReducer.js":"14","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Authorization\\AuthContainer.jsx":"15","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\AddDialog\\AddDialog.jsx":"16","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Authorization\\Auth.jsx":"17","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Authorization\\Registration\\Registration.jsx":"18"},{"size":565,"mtime":1617367740023,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":626,"mtime":1617382558092,"results":"22","hashOfConfig":"20"},{"size":379,"mtime":1617367740021,"results":"23","hashOfConfig":"20"},{"size":2002,"mtime":1617367740014,"results":"24","hashOfConfig":"20"},{"size":2105,"mtime":1617367740019,"results":"25","hashOfConfig":"20"},{"size":611,"mtime":1617367740002,"results":"26","hashOfConfig":"20"},{"size":758,"mtime":1617367739998,"results":"27","hashOfConfig":"20"},{"size":1345,"mtime":1617367739965,"results":"28","hashOfConfig":"20"},{"size":3308,"mtime":1617382397222,"results":"29","hashOfConfig":"20"},{"size":3945,"mtime":1617367739961,"results":"30","hashOfConfig":"20"},{"size":725,"mtime":1617367739967,"results":"31","hashOfConfig":"20"},{"size":1664,"mtime":1617367739958,"results":"32","hashOfConfig":"20"},{"size":4003,"mtime":1617367740006,"results":"33","hashOfConfig":"20"},{"size":1818,"mtime":1617367739947,"results":"34","hashOfConfig":"20"},{"size":3911,"mtime":1617367739956,"results":"35","hashOfConfig":"20"},{"size":5479,"mtime":1617367739946,"results":"36","hashOfConfig":"20"},{"size":5874,"mtime":1617367739952,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1yqn5o0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\index.js",[],["81","82"],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\reportWebVitals.js",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\App.js",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\redux-store.js",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\dialogsReducer.js",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\messagesReducer.js",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messanger.jsx",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messages\\WindowContainer.jsx",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\DialogsContainer.jsx",["83"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport Dialogs from './Dialogs';\nimport {setDialogsAC} from '../redux/dialogsReducer';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsData: state.dialogsInfo.dialogsData\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        setDialogs: (dialogs) => {\n            dispatch(setDialogsAC(dialogs))\n        }\n    }\n}\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\n\nexport default DialogsContainer;","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messages\\Window.jsx",["84"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport css from './Window.module.css';\nimport Message from './Message/Message';\nimport emptyImage from './emptyImage.png';\n\nexport default class MainWindow extends React.Component {\n    constructor(props) {\n        super();\n        this.sendNewMessage = this.sendNewMessage.bind(this);\n        this.onChangeMessage = this.onChangeMessage.bind(this);\n        this.scrollToBottom = this.scrollToBottom.bind(this);\n    }\n\n    newMessage = React.createRef();\n    messagesData;\n    oldMessages = [];\n    needScrollBottom = false;\n\n    sendNewMessage = () => {\n        this.props.sendNewMessage(this.props.currentLogin);\n        this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        const messagesContainer = ReactDOM.findDOMNode(this.messagesContainer);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    onChangeMessage = () => {\n        let message = this.newMessage.current.value;\n        this.props.onChangeMessage(message);\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        if (this.needScrollBottom) {\n            this.needScrollBottom = false;\n            this.scrollToBottom();\n        }\n    }\n\n    render() {\n        if (this.props.messages) {\n            if (this.props.messages.length === 0) {\n                this.messagesData = \n                <div className={css.emptyBlock}>\n                    <div className={css.emptyText}>\n                        <div>\n                            У вас пока нет ни одного сообщения с данным пользователем.\n                        </div>\n                        <div className={css.startChatText}>\n                            Начните общение первым :)\n                        </div>\n                        <img\n                            src={emptyImage} \n                            className={css.emptyImage}></img>\n                    </div>\n                </div>\n            } else {\n                this.messagesData = this.props.messages?.map((messageInfo) =>\n                    <Message messageInfo={messageInfo} currentLogin={this.props.currentLogin}/>\n                );\n                if (this.oldMessages.length !== this.messagesData.length) {\n                    this.needScrollBottom = true;\n                }\n                this.oldMessages = this.messagesData;\n            }\n        }\n\n        return (\n            <div className={css.block}>\n                <div className={css.window} ref={(el) => { this.messagesContainer = el; }}>\n                    {this.messagesData}\n                </div>\n                <div className={css.input}>\n                    <input \n                        ref={this.newMessage} \n                        className={css.inputBlock} \n                        value={this.props.newMessage}\n                        onChange={this.onChangeMessage}>\n                    </input>\n                    <button \n                        className={css.sendButton}\n                        onClick={this.sendNewMessage}>\n                        <span className={css.buttonText}>Отправить</span>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\Dialogs.jsx",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Messages\\Message\\Message.jsx",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.jsx",["85","86"],"import React from 'react';\n\nimport css from './DialogItem.module.css';\n\nexport default function DialogItem(props) {\n    let message;\n    if (props.fromMe) {\n        message = \n        <div className={css.withYou}>\n            <div className={css.you}>\n                Вы:\n            </div>\n            <div className={css.message}>\n                {props.message}\n            </div>\n        </div>\n    } else {\n        message = \n        <div className={css.messageBlock, css.message}>\n            {props.message}\n        </div>\n    }\n    return (\n        <div className={css.dialogBlock}>\n            <div className={css.blockItem}>\n                <div className={css.photo}></div>\n                <div className={css.info}>\n                    <div className={css.name}>\n                        {props.name}\n                    </div>\n                    {message}\n                </div>\n            </div>\n        </div>\n    );\n}","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\redux\\authReducer.js",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Authorization\\AuthContainer.jsx",[],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Dialogs\\AddDialog\\AddDialog.jsx",[],["87","88"],"C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Authorization\\Auth.jsx",["89","90"],"import React from 'react';\nimport mainPNG from '../images/main.jpg';\n\nimport Registration from './Registration/Registration';\nimport './Auth.css';\n\nexport default class Auth extends React.Component {\n    constructor(props) {\n        super();\n        this.onChangeLogin = this.onChangeLogin.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n        this.activateRegDialog = this.activateRegDialog.bind(this);\n        this.updateErrorMessage = this.updateErrorMessage.bind(this);\n        this.authorization = this.authorization.bind(this);\n        this.updateRegLogin = this.updateRegLogin.bind(this);\n        this.updateRegPassword = this.updateRegPassword.bind(this);\n        this.updateRegPhoto = this.updateRegPhoto.bind(this);\n        this.updateMainInfoUser = this.updateMainInfoUser.bind(this);\n    }\n    \n    login = React.createRef();\n    password = React.createRef();\n\n    onChangeLogin() {\n        let newLogin = this.login.current.value;\n        this.props.onChangeLogin(newLogin);\n    }\n    \n    onChangePassword() {\n        let newPassword = this.password.current.value;\n        this.props.onChangePassword(newPassword);\n    }\n\n    activateRegDialog(active) {\n        this.props.activateRegDialog(active);\n    }\n\n    updateErrorMessage(message) {\n        this.props.updateErrorMessage(message);\n    }\n\n    updateRegLogin(regLogin) {\n        this.props.updateRegLogin(regLogin);\n    }\n\n    updateRegPassword(regPassword) {\n        this.props.updateRegPassword(regPassword);\n    }\n\n    updateRegPhoto(regPhoto) {\n        this.props.updateRegPhoto(regPhoto);\n    }\n    \n    updateMainInfoUser(self_id) {\n        this.props.updateMainInfoUser(self_id);\n    }\n\n    authorization() {\n        this.props.authorization(this.props.history);\n    }\n\n    render() {\n        return (\n            <div className=\"frukt-main-window\">\n                <div className=\"frukt-input-block-info\">\n                    <div className=\"ws-ellipsis frukt-first-block\">\n                        <span className=\"frukt-login-name\">Fruktogram</span>\n                    </div>\n                    <div className=\"frukt-login\">\n                        <div className=\"frukt-login-first-input\">\n                            <div className=\"frukt-login-title\">Логин</div>\n                            <div>\n                                <input\n                                    ref={this.login} \n                                    value={this.props.login} \n                                    onChange={this.onChangeLogin}\n                                    className=\"frukt-login-input\"/>\n                            </div>\n                        </div>\n                        <div>\n                            <div className=\"frukt-login-title\">Пароль</div>\n                            <div>\n                                <input\n                                    type=\"password\"\n                                    ref={this.password} \n                                    value={this.props.password} \n                                    onChange={this.onChangePassword}\n                                    className=\"frukt-login-input\"/>\n                            </div>\n                        </div>\n                        <div>\n                            <a className=\"frukt-login-forgot frukt-link-decoration\">Забыли пароль?</a>\n                        </div>\n                    </div>\n                    <div>\n                        <button className=\"frukt-login-button\"\n                                onClick={this.authorization}>\n                            <span \n                                className=\"frukt-login-button-text\">\n                                    Войти\n                            </span>\n                        </button>\n                    </div>\n                    <div className=\"frukt-last-block\">\n                        <span className=\"frukt-login-none-text\">Нет аккаунта?</span>\n                        <button \n                            className=\"frukt-registr frukt-link-decoration\"\n                            onClick={() => {this.activateRegDialog(true)}}>\n                                Зарегестрируйтесь!\n                        </button>\n                    </div>\n                </div>\n                <Registration \n                    active={this.props.activeDialog}\n                    errorMessage={this.props.errorMessage}\n                    photoSrc={this.props.photoSrc}\n                    regLogin={this.props.regLogin}\n                    regPassword={this.props.regPassword}\n                    activateDialog={this.activateDialog}\n                    updateErrorMessage={this.updateErrorMessage}\n                    updateRegLogin={this.updateRegLogin}\n                    updateRegPassword={this.updateRegPassword}\n                    updateRegPhoto={this.updateRegPhoto}\n                    history={this.props.history}\n                    updateMainInfoUser={this.updateMainInfoUser}\n                    activateRegDialog={this.activateRegDialog}\n                />\n                <div className=\"frukt-input-block-image\">\n                    {/* <div className=\"fruit-image-block ws-ellipsis\">\n                        <img className=\"fruit-image\" src={mainPNG} />\n                    </div>\n                    <div className=\"fruit-image-back-block\"></div> */}\n                </div>\n            </div>\n        )\n    }\n}","C:\\Users\\Daniil\\Desktop\\123\\Tensor-app\\src\\components\\Authorization\\Registration\\Registration.jsx",["91"],"import React from 'react';\nimport axios from 'axios';\n\nimport './Registration.css';\n\nexport default class Registration extends React.Component {\n    constructor() {\n        super();\n        this.registation = this.registation.bind(this);\n        this.closeDialog = this.closeDialog.bind(this);\n        this.onChangeRegLogin = this.onChangeRegLogin.bind(this);\n        this.onChangeRegPassword = this.onChangeRegPassword.bind(this);\n        this.onChangeRegPhoto = this.onChangeRegPhoto.bind(this);\n    }\n    \n    login = React.createRef();\n    password = React.createRef();\n    photoSrc = React.createRef();\n\n    onChangeRegLogin() {\n        let newLogin = this.login.current.value;\n        this.props.updateRegLogin(newLogin);\n    }\n\n    onChangeRegPassword() {\n        let newPassword = this.password.current.value;\n        this.props.updateRegPassword(newPassword);\n    }\n\n    onChangeRegPhoto() {\n        let newPhoto = this.photoSrc.current.value;\n        this.props.updateRegPhoto(newPhoto);\n    }\n\n    registation() {\n        let login = this.login.current.value;\n        let password = this.password.current.value;\n        let image = this.photoSrc.current.value;\n        if (!login) {\n            this.props.updateErrorMessage('Пустой логин');\n        } else if (!password) {\n            this.props.updateErrorMessage('Пустой пароль');\n        } else {\n            axios.post('http://127.0.0.1:5000/registration', {\n                login,\n                password,\n                image\n            }).then((response) => {\n                if (response.data.result) {\n                    this.props.updateMainInfoUser(response.data.userInfo.self_id);\n                    this.props.activateRegDialog(false);\n                    this.props.history.push('/messanger');\n                } else {\n                    if (response.data.errorMessage === 'Already existing user') {\n                        this.props.updateErrorMessage('Данный логин занят');\n                    }\n                }\n            });\n        }\n    }\n\n    closeDialog() {\n        this.props.activateDialog(false);\n        this.login.current.value = '';\n        this.password.current.value = '';\n        this.props.updateErrorMessage('');\n    }\n\n    render() {\n        return(\n            <div className={this.props.active ? 'window active' : 'window'}>\n                <div className={this.props.active ? 'content_reg active' : 'content_reg'}>\n                    <div className='inputInfoBlock'>\n                        <div className='reg_input'>\n                            <div>\n                                <div className='inputText'>\n                                    Введите желаемый логин: \n                                </div>\n                                <div>\n                                    <input \n                                        ref={this.login} \n                                        className='inputBlock'\n                                        value={this.props.regLogin} \n                                        onChange={this.onChangeRegLogin} />\n                                </div>\n                            </div>\n                            <div className='inputPassword'>\n                                <div className='inputText'>\n                                    Введите пароль: \n                                </div>\n                                <div>\n                                    <input \n                                        ref={this.password} \n                                        className='inputBlock'\n                                        value={this.props.regPassword} \n                                        onChange={this.onChangeRegPassword} />\n                                </div>\n                            </div>\n                            <div className='errorTextBlock'>\n                                <span className='errorText'>{this.props.errorMessage}</span>\n                            </div>\n                        </div>\n                        <div className='inputPhotoBlock'>\n                            <div className='photoBlock'>\n                                <img className='photo' src={this.props.photoSrc}></img>\n                            </div>\n                            <div>\n                            <div className='inputText'>\n                                    Вставьте ссылку на фото: \n                                </div>\n                                <div>\n                                    <input \n                                        ref={this.photoSrc} \n                                        className='inputBlock'\n                                        value={this.props.photoSrc} \n                                        onChange={this.onChangeRegPhoto} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='reg_buttons'>\n                        <div className='reg_button'>\n                            <button className='cancelButton' onClick={this.closeDialog}>\n                                <span className='buttonText'>\n                                    Отменить\n                                </span>\n                            </button>\n                        </div>\n                        <div>\n                            <button className='regButton' onClick={this.registation}>\n                                <span className='buttonText'>\n                                    Зарегестрироваться\n                                </span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":58,"column":25,"nodeType":"102","endLine":60,"endColumn":56},{"ruleId":"103","severity":1,"message":"104","line":36,"column":45,"nodeType":"105","messageId":"106","endLine":36,"endColumn":46},{"ruleId":"100","severity":1,"message":"101","line":44,"column":21,"nodeType":"102","endLine":44,"endColumn":73},{"ruleId":"92","replacedBy":"107"},{"ruleId":"94","replacedBy":"108"},{"ruleId":"96","severity":1,"message":"109","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":15},{"ruleId":"110","severity":1,"message":"111","line":92,"column":29,"nodeType":"102","endLine":92,"endColumn":85},{"ruleId":"100","severity":1,"message":"101","line":105,"column":33,"nodeType":"102","endLine":105,"endColumn":82},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["112"],["113"],"'mainPNG' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]